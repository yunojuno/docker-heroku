name: Docker Build

on:
  schedule:
    # Schedule runs run off HEAD commit on master.
    # Run once a day to keep yunojuno/heroku up to
    # date with Heroku's base image.
    - cron:  '* 23 * * *'

  push:
    branches:
      - master

  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  docker-build-push:
    name: Build Docker image & push (if master)
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

        # Docker Meta handles manipulating various GitHub
        # Action contexts into sane Docker image tags &
        # labels. See more below.
      - name: Instantiate Docker Meta
        id: docker_meta
        # Hash is pinned to v1.11.0 for security.
        uses: crazy-max/ghaction-docker-meta@9ae6899cfa6d691ad29d6fc0a228f276a16f5d44
        with:
          images: yunojuno/heroku
          tag-sha: true
          # We tag our images with the major version of Python.
          tag-custom: 3.9-latest

        # Sets up buildx to work with GitHub Actions
        # Cache. This caches buildx's layers, so that
        # rebuilding reuses layers that have not changed.
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          # This restore key means "fall back to the latest
          # key that is prefixed like this"; this means that
          # a cache miss on the exact key will fallback to the
          # most recently created buildx cache key. This is
          # safe because it's a layer cache, and buildx will
          # only pull a cached layer if it knows it needs it
          # (they are content addressed).
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          # Pull forces Docker to check the network for the
          # latest version of base images.
          pull: true
          # Push image only when on master.
          push: ${{ github.ref == 'refs/heads/master' }}
          # Use Docker Meta to set the tags & OCI Image Format labels.
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          # Ensure we read & write to the GH action cache.
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
